
cj_dash.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000308  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  00000308  0000037c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000c30  00000000  00000000  000003a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ef4  00000000  00000000  00000fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001ecc  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001ee0  2**2
                  CONTENTS, READONLY
  6 .debug_info   0000048c  00000000  00000000  00001f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000044e  00000000  00000000  000023a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  000027f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000017a  00000000  00000000  00002810  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e8 e0       	ldi	r30, 0x08	; 8
  3a:	f3 e0       	ldi	r31, 0x03	; 3
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	aa 38       	cpi	r26, 0x8A	; 138
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>
  48:	d3 d0       	rcall	.+422    	; 0x1f0 <main>
  4a:	5c c1       	rjmp	.+696    	; 0x304 <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <reset>:
#define UL_END            (0x45)


void reset(void)
{
  PORTB &= 0xdf;  // clear reset pin
  4e:	c5 98       	cbi	0x18, 5	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  50:	81 ee       	ldi	r24, 0xE1	; 225
  52:	94 e0       	ldi	r25, 0x04	; 4
  54:	01 97       	sbiw	r24, 0x01	; 1
  56:	f1 f7       	brne	.-4      	; 0x54 <reset+0x6>
  58:	00 c0       	rjmp	.+0      	; 0x5a <reset+0xc>
  5a:	00 00       	nop
  _delay_ms(5);   // spec is 2 ms, but let's be safe
  PORTB |= 0x20;  // set reset pin
  5c:	c5 9a       	sbi	0x18, 5	; 24
  5e:	83 ef       	ldi	r24, 0xF3	; 243
  60:	91 e0       	ldi	r25, 0x01	; 1
  62:	01 97       	sbiw	r24, 0x01	; 1
  64:	f1 f7       	brne	.-4      	; 0x62 <reset+0x14>
  66:	00 c0       	rjmp	.+0      	; 0x68 <reset+0x1a>
  68:	00 00       	nop
  6a:	08 95       	ret

0000006c <write>:
  _delay_ms(2);   // RES to WR is 2 ms, should be fine here
}

void write(uint8_t d)
{
  uint8_t b = PORTB;
  6c:	98 b3       	in	r25, 0x18	; 24
  b &= 0xf0;
  b |= (d & 0x0f);
  6e:	28 2f       	mov	r18, r24
  70:	2f 70       	andi	r18, 0x0F	; 15
  72:	90 7f       	andi	r25, 0xF0	; 240
  74:	92 2b       	or	r25, r18
  PORTB = b;
  76:	98 bb       	out	0x18, r25	; 24
  b = PORTD;
  78:	92 b3       	in	r25, 0x12	; 18
  b &= 0x0f;
  b |= (d & 0xf0);
  7a:	80 7f       	andi	r24, 0xF0	; 240
  7c:	9f 70       	andi	r25, 0x0F	; 15
  7e:	89 2b       	or	r24, r25
  PORTD = b;
  80:	82 bb       	out	0x12, r24	; 18

  PORTB &= 0xef;  // clear WR
  82:	c4 98       	cbi	0x18, 4	; 24
  PORTB |= 0x10;  // set WR
  84:	c4 9a       	sbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  86:	84 e7       	ldi	r24, 0x74	; 116
  88:	8a 95       	dec	r24
  8a:	f1 f7       	brne	.-4      	; 0x88 <write+0x1c>
  8c:	00 c0       	rjmp	.+0      	; 0x8e <write+0x22>
  8e:	08 95       	ret

00000090 <setCursor.part.0>:
  {
    write(0x0e);  // turn it off
  }
}

void setCursor(int pt)
  90:	cf 93       	push	r28
  92:	c8 2f       	mov	r28, r24
{
  if(pt < 40)
  {
    write(0x1b);
  94:	8b e1       	ldi	r24, 0x1B	; 27
  96:	ea df       	rcall	.-44     	; 0x6c <write>
    write( (uint8_t)(pt & 0xff) );
  98:	8c 2f       	mov	r24, r28
  9a:	e8 df       	rcall	.-48     	; 0x6c <write>
  }
}
  9c:	cf 91       	pop	r28
  9e:	08 95       	ret

000000a0 <writeString>:
  _delay_us(350); // wait
  // _delay_ms(5);
}

void writeString(char* str)
{
  a0:	cf 93       	push	r28
  a2:	df 93       	push	r29
  if(str != NULL)
  a4:	00 97       	sbiw	r24, 0x00	; 0
  a6:	31 f0       	breq	.+12     	; 0xb4 <writeString+0x14>
  a8:	ec 01       	movw	r28, r24
  {
    char ch;
    while((ch = *str) != 0)
  aa:	89 91       	ld	r24, Y+
  ac:	88 23       	and	r24, r24
  ae:	11 f0       	breq	.+4      	; 0xb4 <writeString+0x14>
    {
      write(ch);
  b0:	dd df       	rcall	.-70     	; 0x6c <write>
  b2:	fb cf       	rjmp	.-10     	; 0xaa <writeString+0xa>
      str++;
    }
  }
}
  b4:	df 91       	pop	r29
  b6:	cf 91       	pop	r28
  b8:	08 95       	ret

000000ba <cursor>:

void cursor(int onoff)
{
  if(onoff != 0)
  ba:	89 2b       	or	r24, r25
  bc:	11 f0       	breq	.+4      	; 0xc2 <cursor+0x8>
  {
    write(0x0f);  // turn it on
  be:	8f e0       	ldi	r24, 0x0F	; 15
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <cursor+0xa>
  }
  else
  {
    write(0x0e);  // turn it off
  c2:	8e e0       	ldi	r24, 0x0E	; 14
  c4:	d3 df       	rcall	.-90     	; 0x6c <write>
  c6:	08 95       	ret

000000c8 <setCursor>:
  }
}

void setCursor(int pt)
{
  if(pt < 40)
  c8:	88 32       	cpi	r24, 0x28	; 40
  ca:	91 05       	cpc	r25, r1
  cc:	0c f4       	brge	.+2      	; 0xd0 <setCursor+0x8>
  ce:	e0 df       	rcall	.-64     	; 0x90 <setCursor.part.0>
  d0:	08 95       	ret

000000d2 <clear>:
  }
}

void clear(void)
{
  write(CLEAR);
  d2:	85 e1       	ldi	r24, 0x15	; 21
  d4:	cb df       	rcall	.-106    	; 0x6c <write>
  d6:	08 95       	ret

000000d8 <writeNumber>:
}

void writeNumber(int num, int places)
{
  d8:	08 95       	ret

000000da <writeTach>:

}

void writeTach(int rpm)
{
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b0 e0       	ldi	r27, 0x00	; 0
  de:	e2 e7       	ldi	r30, 0x72	; 114
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	d0 c0       	rjmp	.+416    	; 0x284 <__prologue_saves__+0x16>
  e4:	ec 01       	movw	r28, r24
  if(rpm < 0) rpm = 0;
  e6:	97 fd       	sbrc	r25, 7
  e8:	06 c0       	rjmp	.+12     	; 0xf6 <writeTach+0x1c>
  if(rpm > 7999) rpm = 7999;
  ea:	80 34       	cpi	r24, 0x40	; 64
  ec:	9f 41       	sbci	r25, 0x1F	; 31
  ee:	2c f0       	brlt	.+10     	; 0xfa <writeTach+0x20>
  f0:	cf e3       	ldi	r28, 0x3F	; 63
  f2:	df e1       	ldi	r29, 0x1F	; 31
  f4:	02 c0       	rjmp	.+4      	; 0xfa <writeTach+0x20>

}

void writeTach(int rpm)
{
  if(rpm < 0) rpm = 0;
  f6:	c0 e0       	ldi	r28, 0x00	; 0
  f8:	d0 e0       	ldi	r29, 0x00	; 0
  fa:	8a e0       	ldi	r24, 0x0A	; 10
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	c8 df       	rcall	.-112    	; 0x90 <setCursor.part.0>
  if(rpm > 7999) rpm = 7999;
  // setCursor(10);
  //writeString("          ");
  setCursor(10);
  uint8_t scale = (uint8_t)(rpm / 100); // scale to 0 to 80
 100:	ce 01       	movw	r24, r28
 102:	64 e6       	ldi	r22, 0x64	; 100
 104:	70 e0       	ldi	r23, 0x00	; 0
 106:	a0 d0       	rcall	.+320    	; 0x248 <__divmodhi4>
 108:	26 2f       	mov	r18, r22
  char ch1 = scale / 10 + '0';
 10a:	86 2f       	mov	r24, r22
 10c:	6a e0       	ldi	r22, 0x0A	; 10
 10e:	90 d0       	rcall	.+288    	; 0x230 <__udivmodqi4>
 110:	c8 2f       	mov	r28, r24
 112:	80 e3       	ldi	r24, 0x30	; 48
 114:	d8 2e       	mov	r13, r24
 116:	dc 0e       	add	r13, r28
  //if(ch1 == '0') ch1 = ' ';
  char ch2 = scale % 10 + '0';
 118:	00 e3       	ldi	r16, 0x30	; 48
 11a:	09 0f       	add	r16, r25

  scale /= 2;  // now 0 to 40;
  uint8_t full = scale / 5;
  uint8_t part = scale % 5;
 11c:	82 2f       	mov	r24, r18
 11e:	86 95       	lsr	r24
 120:	65 e0       	ldi	r22, 0x05	; 5
 122:	86 d0       	rcall	.+268    	; 0x230 <__udivmodqi4>
 124:	19 2f       	mov	r17, r25
  int toWrite = 8;
  for(int i = 0; i < full; i++) write(0x7f);
 126:	e1 2c       	mov	r14, r1
 128:	f1 2c       	mov	r15, r1
 12a:	d0 e0       	ldi	r29, 0x00	; 0
 12c:	ec 16       	cp	r14, r28
 12e:	fd 06       	cpc	r15, r29
 130:	34 f4       	brge	.+12     	; 0x13e <writeTach+0x64>
 132:	8f e7       	ldi	r24, 0x7F	; 127
 134:	9b df       	rcall	.-202    	; 0x6c <write>
 136:	3f ef       	ldi	r19, 0xFF	; 255
 138:	e3 1a       	sub	r14, r19
 13a:	f3 0a       	sbc	r15, r19
 13c:	f7 cf       	rjmp	.-18     	; 0x12c <writeTach+0x52>
 13e:	e1 2f       	mov	r30, r17
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	e0 5a       	subi	r30, 0xA0	; 160
 144:	ff 4f       	sbci	r31, 0xFF	; 255
    break;
  default:
    partChar = 0xfe;
    break;
  }
  write(partChar);
 146:	80 81       	ld	r24, Z
 148:	91 df       	rcall	.-222    	; 0x6c <write>
  toWrite -= 1;
 14a:	87 e0       	ldi	r24, 0x07	; 7
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	9c 01       	movw	r18, r24
 150:	2c 1b       	sub	r18, r28
 152:	3d 0b       	sbc	r19, r29
 154:	e9 01       	movw	r28, r18
  for(int i = 0; i < toWrite; i++) write(' ');
 156:	e1 2c       	mov	r14, r1
 158:	f1 2c       	mov	r15, r1
 15a:	ec 16       	cp	r14, r28
 15c:	fd 06       	cpc	r15, r29
 15e:	31 f0       	breq	.+12     	; 0x16c <writeTach+0x92>
 160:	80 e2       	ldi	r24, 0x20	; 32
 162:	84 df       	rcall	.-248    	; 0x6c <write>
 164:	3f ef       	ldi	r19, 0xFF	; 255
 166:	e3 1a       	sub	r14, r19
 168:	f3 0a       	sbc	r15, r19
 16a:	f7 cf       	rjmp	.-18     	; 0x15a <writeTach+0x80>
  write(ch1);
 16c:	8d 2d       	mov	r24, r13
 16e:	7e df       	rcall	.-260    	; 0x6c <write>
  write(ch2);
 170:	80 2f       	mov	r24, r16
 172:	7c df       	rcall	.-264    	; 0x6c <write>
}
 174:	cd b7       	in	r28, 0x3d	; 61
 176:	de b7       	in	r29, 0x3e	; 62
 178:	e7 e0       	ldi	r30, 0x07	; 7
 17a:	a0 c0       	rjmp	.+320    	; 0x2bc <__epilogue_restores__+0x16>

0000017c <init>:

void init(void)
{
  DDRB = 0x3f;      // D0-D3 and WR, RES as outputs
 17c:	8f e3       	ldi	r24, 0x3F	; 63
 17e:	87 bb       	out	0x17, r24	; 23
  DDRD = 0xf0;      // D4-D7 as outputs
 180:	80 ef       	ldi	r24, 0xF0	; 240
 182:	81 bb       	out	0x11, r24	; 17
  PORTB = 0xff;     // Prep the objective
 184:	8f ef       	ldi	r24, 0xFF	; 255
 186:	88 bb       	out	0x18, r24	; 24
  PORTD = 0xff;
 188:	82 bb       	out	0x12, r24	; 18
  reset();
 18a:	61 df       	rcall	.-318    	; 0x4e <reset>
  clear();
 18c:	a2 df       	rcall	.-188    	; 0xd2 <clear>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18e:	87 ea       	ldi	r24, 0xA7	; 167
 190:	91 e6       	ldi	r25, 0x61	; 97
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <init+0x16>
 196:	00 c0       	rjmp	.+0      	; 0x198 <init+0x1c>
 198:	00 00       	nop
  _delay_ms(100);   // Let things settle
  write(LUMINANCE_SET);
 19a:	84 e0       	ldi	r24, 0x04	; 4
 19c:	67 df       	rcall	.-306    	; 0x6c <write>
  write(0x20);      // Set low brightness
 19e:	80 e2       	ldi	r24, 0x20	; 32
 1a0:	65 df       	rcall	.-310    	; 0x6c <write>
  {
    write(0x0f);  // turn it on
  }
  else
  {
    write(0x0e);  // turn it off
 1a2:	8e e0       	ldi	r24, 0x0E	; 14
 1a4:	63 df       	rcall	.-314    	; 0x6c <write>
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	72 df       	rcall	.-284    	; 0x90 <setCursor.part.0>
  _delay_ms(100);   // Let things settle
  write(LUMINANCE_SET);
  write(0x20);      // Set low brightness
  cursor(0);        // Turn off cursor
  setCursor(0);
  writeString("v13.6");     // Init display constants
 1ac:	85 e6       	ldi	r24, 0x65	; 101
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	77 df       	rcall	.-274    	; 0xa0 <writeString>
 1b2:	85 e0       	ldi	r24, 0x05	; 5
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	6c df       	rcall	.-296    	; 0x90 <setCursor.part.0>
  setCursor(5);
  writeString("t 180");
 1b8:	8b e6       	ldi	r24, 0x6B	; 107
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	71 df       	rcall	.-286    	; 0xa0 <writeString>
 1be:	84 e1       	ldi	r24, 0x14	; 20
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	66 df       	rcall	.-308    	; 0x90 <setCursor.part.0>
  setCursor(20);
  writeString("p  60");
 1c4:	81 e7       	ldi	r24, 0x71	; 113
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	6b df       	rcall	.-298    	; 0xa0 <writeString>
 1ca:	89 e1       	ldi	r24, 0x19	; 25
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	60 df       	rcall	.-320    	; 0x90 <setCursor.part.0>
  setCursor(25);
  writeString("o 187");
 1d0:	87 e7       	ldi	r24, 0x77	; 119
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	65 df       	rcall	.-310    	; 0xa0 <writeString>
 1d6:	8e e1       	ldi	r24, 0x1E	; 30
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	5a df       	rcall	.-332    	; 0x90 <setCursor.part.0>
  setCursor(30);
  writeString(" f 38");
 1dc:	8d e7       	ldi	r24, 0x7D	; 125
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	5f df       	rcall	.-322    	; 0xa0 <writeString>
 1e2:	83 e2       	ldi	r24, 0x23	; 35
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	54 df       	rcall	.-344    	; 0x90 <setCursor.part.0>
  setCursor(35);
  writeString("mp 42");
 1e8:	83 e8       	ldi	r24, 0x83	; 131
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	59 df       	rcall	.-334    	; 0xa0 <writeString>
 1ee:	08 95       	ret

000001f0 <main>:

  

int main()
{
  init();
 1f0:	c5 df       	rcall	.-118    	; 0x17c <init>

  while(1)
  {
    int rpm;
    for(rpm = 0; rpm < 8000; rpm+=25)
 1f2:	c0 e0       	ldi	r28, 0x00	; 0
 1f4:	d0 e0       	ldi	r29, 0x00	; 0
    {
      writeTach(rpm);
 1f6:	ce 01       	movw	r24, r28
 1f8:	70 df       	rcall	.-288    	; 0xda <writeTach>
 1fa:	89 ef       	ldi	r24, 0xF9	; 249
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <main+0xe>
 202:	00 c0       	rjmp	.+0      	; 0x204 <main+0x14>
 204:	00 00       	nop
  init();

  while(1)
  {
    int rpm;
    for(rpm = 0; rpm < 8000; rpm+=25)
 206:	69 96       	adiw	r28, 0x19	; 25
 208:	c0 34       	cpi	r28, 0x40	; 64
 20a:	9f e1       	ldi	r25, 0x1F	; 31
 20c:	d9 07       	cpc	r29, r25
 20e:	99 f7       	brne	.-26     	; 0x1f6 <main+0x6>
 210:	cf e3       	ldi	r28, 0x3F	; 63
 212:	df e1       	ldi	r29, 0x1F	; 31
      writeTach(rpm);
       _delay_ms(1);
    }
    for(rpm = 7999; rpm > 0; rpm-=25)
    {
      writeTach(rpm);
 214:	ce 01       	movw	r24, r28
 216:	61 df       	rcall	.-318    	; 0xda <writeTach>
 218:	89 ef       	ldi	r24, 0xF9	; 249
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	01 97       	sbiw	r24, 0x01	; 1
 21e:	f1 f7       	brne	.-4      	; 0x21c <main+0x2c>
 220:	00 c0       	rjmp	.+0      	; 0x222 <main+0x32>
 222:	00 00       	nop
    for(rpm = 0; rpm < 8000; rpm+=25)
    {
      writeTach(rpm);
       _delay_ms(1);
    }
    for(rpm = 7999; rpm > 0; rpm-=25)
 224:	69 97       	sbiw	r28, 0x19	; 25
 226:	cf 3f       	cpi	r28, 0xFF	; 255
 228:	9f ef       	ldi	r25, 0xFF	; 255
 22a:	d9 07       	cpc	r29, r25
 22c:	99 f7       	brne	.-26     	; 0x214 <main+0x24>
 22e:	e1 cf       	rjmp	.-62     	; 0x1f2 <main+0x2>

00000230 <__udivmodqi4>:
 230:	99 1b       	sub	r25, r25
 232:	79 e0       	ldi	r23, 0x09	; 9
 234:	04 c0       	rjmp	.+8      	; 0x23e <__udivmodqi4_ep>

00000236 <__udivmodqi4_loop>:
 236:	99 1f       	adc	r25, r25
 238:	96 17       	cp	r25, r22
 23a:	08 f0       	brcs	.+2      	; 0x23e <__udivmodqi4_ep>
 23c:	96 1b       	sub	r25, r22

0000023e <__udivmodqi4_ep>:
 23e:	88 1f       	adc	r24, r24
 240:	7a 95       	dec	r23
 242:	c9 f7       	brne	.-14     	; 0x236 <__udivmodqi4_loop>
 244:	80 95       	com	r24
 246:	08 95       	ret

00000248 <__divmodhi4>:
 248:	97 fb       	bst	r25, 7
 24a:	07 2e       	mov	r0, r23
 24c:	16 f4       	brtc	.+4      	; 0x252 <__divmodhi4+0xa>
 24e:	00 94       	com	r0
 250:	06 d0       	rcall	.+12     	; 0x25e <__divmodhi4_neg1>
 252:	77 fd       	sbrc	r23, 7
 254:	08 d0       	rcall	.+16     	; 0x266 <__divmodhi4_neg2>
 256:	42 d0       	rcall	.+132    	; 0x2dc <__udivmodhi4>
 258:	07 fc       	sbrc	r0, 7
 25a:	05 d0       	rcall	.+10     	; 0x266 <__divmodhi4_neg2>
 25c:	3e f4       	brtc	.+14     	; 0x26c <__divmodhi4_exit>

0000025e <__divmodhi4_neg1>:
 25e:	90 95       	com	r25
 260:	81 95       	neg	r24
 262:	9f 4f       	sbci	r25, 0xFF	; 255
 264:	08 95       	ret

00000266 <__divmodhi4_neg2>:
 266:	70 95       	com	r23
 268:	61 95       	neg	r22
 26a:	7f 4f       	sbci	r23, 0xFF	; 255

0000026c <__divmodhi4_exit>:
 26c:	08 95       	ret

0000026e <__prologue_saves__>:
 26e:	2f 92       	push	r2
 270:	3f 92       	push	r3
 272:	4f 92       	push	r4
 274:	5f 92       	push	r5
 276:	6f 92       	push	r6
 278:	7f 92       	push	r7
 27a:	8f 92       	push	r8
 27c:	9f 92       	push	r9
 27e:	af 92       	push	r10
 280:	bf 92       	push	r11
 282:	cf 92       	push	r12
 284:	df 92       	push	r13
 286:	ef 92       	push	r14
 288:	ff 92       	push	r15
 28a:	0f 93       	push	r16
 28c:	1f 93       	push	r17
 28e:	cf 93       	push	r28
 290:	df 93       	push	r29
 292:	cd b7       	in	r28, 0x3d	; 61
 294:	de b7       	in	r29, 0x3e	; 62
 296:	ca 1b       	sub	r28, r26
 298:	db 0b       	sbc	r29, r27
 29a:	0f b6       	in	r0, 0x3f	; 63
 29c:	f8 94       	cli
 29e:	de bf       	out	0x3e, r29	; 62
 2a0:	0f be       	out	0x3f, r0	; 63
 2a2:	cd bf       	out	0x3d, r28	; 61
 2a4:	09 94       	ijmp

000002a6 <__epilogue_restores__>:
 2a6:	2a 88       	ldd	r2, Y+18	; 0x12
 2a8:	39 88       	ldd	r3, Y+17	; 0x11
 2aa:	48 88       	ldd	r4, Y+16	; 0x10
 2ac:	5f 84       	ldd	r5, Y+15	; 0x0f
 2ae:	6e 84       	ldd	r6, Y+14	; 0x0e
 2b0:	7d 84       	ldd	r7, Y+13	; 0x0d
 2b2:	8c 84       	ldd	r8, Y+12	; 0x0c
 2b4:	9b 84       	ldd	r9, Y+11	; 0x0b
 2b6:	aa 84       	ldd	r10, Y+10	; 0x0a
 2b8:	b9 84       	ldd	r11, Y+9	; 0x09
 2ba:	c8 84       	ldd	r12, Y+8	; 0x08
 2bc:	df 80       	ldd	r13, Y+7	; 0x07
 2be:	ee 80       	ldd	r14, Y+6	; 0x06
 2c0:	fd 80       	ldd	r15, Y+5	; 0x05
 2c2:	0c 81       	ldd	r16, Y+4	; 0x04
 2c4:	1b 81       	ldd	r17, Y+3	; 0x03
 2c6:	aa 81       	ldd	r26, Y+2	; 0x02
 2c8:	b9 81       	ldd	r27, Y+1	; 0x01
 2ca:	ce 0f       	add	r28, r30
 2cc:	d1 1d       	adc	r29, r1
 2ce:	0f b6       	in	r0, 0x3f	; 63
 2d0:	f8 94       	cli
 2d2:	de bf       	out	0x3e, r29	; 62
 2d4:	0f be       	out	0x3f, r0	; 63
 2d6:	cd bf       	out	0x3d, r28	; 61
 2d8:	ed 01       	movw	r28, r26
 2da:	08 95       	ret

000002dc <__udivmodhi4>:
 2dc:	aa 1b       	sub	r26, r26
 2de:	bb 1b       	sub	r27, r27
 2e0:	51 e1       	ldi	r21, 0x11	; 17
 2e2:	07 c0       	rjmp	.+14     	; 0x2f2 <__udivmodhi4_ep>

000002e4 <__udivmodhi4_loop>:
 2e4:	aa 1f       	adc	r26, r26
 2e6:	bb 1f       	adc	r27, r27
 2e8:	a6 17       	cp	r26, r22
 2ea:	b7 07       	cpc	r27, r23
 2ec:	10 f0       	brcs	.+4      	; 0x2f2 <__udivmodhi4_ep>
 2ee:	a6 1b       	sub	r26, r22
 2f0:	b7 0b       	sbc	r27, r23

000002f2 <__udivmodhi4_ep>:
 2f2:	88 1f       	adc	r24, r24
 2f4:	99 1f       	adc	r25, r25
 2f6:	5a 95       	dec	r21
 2f8:	a9 f7       	brne	.-22     	; 0x2e4 <__udivmodhi4_loop>
 2fa:	80 95       	com	r24
 2fc:	90 95       	com	r25
 2fe:	bc 01       	movw	r22, r24
 300:	cd 01       	movw	r24, r26
 302:	08 95       	ret

00000304 <_exit>:
 304:	f8 94       	cli

00000306 <__stop_program>:
 306:	ff cf       	rjmp	.-2      	; 0x306 <__stop_program>
